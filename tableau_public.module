<?php
/**
* @file
* Loads visualizations from Tableau Public with a simple url
*/

/**
 * Implements hook_field_info().
 */
function tableau_public_field_info() {
  return array(
    'tableau_public_info' => array(
      'label' => t('Tableau Visualization'),
      'description' => t("Basic information about a Tableau viz"),
      'settings' => array('max_length' => 255),
      'default_widget' => 'tableau_public_info',
      'default_formatter' => 'tableau_public_info', // This doesn't *have* to be the same name as default_widget's value, this is only coincidence
    ),
    'tableau_public_sheets' => array(
      'label' => t('Tableau Sheets'),
      'description' => t("Create a list of individual sheets within a Tableau viz"),
      'default_widget' => 'tableau_public_sheets',
      'default_formatter' => 'tableau_public_sheets',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function tableau_public_field_widget_info() {
  return array(
    'tableau_public_sheets' => array(
      'label' => 'Tableau Sheets',
      'field types' => array('tableau_public_sheets'),
      'multiple values' => TRUE,
    ),
  );
}

/**
 * Implements hook_field_widget_info_alter().
 */
function tableau_public_field_widget_info_alter(&$info) {
  // Let a new field type re-use an existing widget.
  $info['text_textfield']['field types'][] = 'tableau_public_info';
}

/**
 * Implements HOOK_FIELD_WIDGET_FORM().
 */
function tableau_public_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'tableau_public_sheets':
      // Custom definition for sheet name text field
      $value = isset($items[$delta]['name']) ? $items[$delta]['name'] : '';
      $element['name'] = array(
        '#attributes'     => array(
          'class'         => array('edit-sheet'),
          'title'         => '',
          'rel'           => '',
        ),
        '#type'           => 'textfield',
        '#size'           => 60,
        '#maxlength'      => 255,
        '#title'          => 'Sheet name',
        '#default_value'  => $value,
        '#attached'       => array(),
        '#prefix'         => '<div>',
        '#suffix'         => '</div>'
      );

      // Custom definition for mobile layout boolean checkbox
      $value = isset($items[$delta]['mobile']) ? $items[$delta]['mobile'] : '';
      $element['mobile'] = array(
        '#type'             => 'checkbox',
        '#default_value'    => $value,
        '#on_value'         => 'yes',
        '#off_value'        => 'no',
        '#title'            => 'Mobile layout',
        '#value_key'        => 'mobile',
      );
      break;
  }
  dsm($element, '$element');
  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function tableau_public_field_is_empty($item, $field) {
  // has the user checked off the checkbox?
  if (empty($item['name'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_field_formatter_info().
 */
function tableau_public_field_field_formatter_info() {
  return array(
    'tableau_public_info' => array(
      'label' => t('Tableau Visualization'),
      'field types' => array('tableau_public_info'),
    ),
    'tableau_public_sheets' => array(
      'label' => t('Tableau Sheets'),
      'field types' => array('tableau_public_sheets'),
    ),
  );
}

/**
 * Implements hook_field_field_formatter_view().
 */
function tableau_public_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'tableau_public_info':
      $headers = array(
        t('Title'),
        t('Dynamic Title'),
        t('Short Code'),
        t('Vizualization URL'),
      );

      $element[0]['#theme'] = 'table';
      $element[0]['#data'] = array('header' => $headers, 'rows' => $items);
      break;

    case 'tableau_public_sheets':
      $headers = array(
        t('Name'),
        t('Mobile layout'),
      );

      $element[0]['#theme'] = 'table';
      $element[0]['#data'] = array('header' => $headers, 'rows' => $items);
      break;
  }
  return $element;
}


/**
 * Grabs data from node fields; adds to Drupal.setting js object.
 *
 * @param int $nid
 *   Integer that refers to a node ID.  Function will automatically pull the
 *   correct fields from the node using the nid.
 */
function tableau_public_add_viz($nid) {
  drupal_add_js('https://public.tableau.com/javascripts/api/tableau-2.min.js', array('type' => 'external', 'scope' => 'footer'));
  drupal_add_js('tableau-interactive.js', array('type' => 'file', 'scope' => 'footer'));

  // store tableau viz, sheets, & mobile config for jQuery.extend
  $node = node_load($nid);
  $tableau_data = array();

  // check all interactives on the page, see if any of them are Tableau
  foreach ($node->field_chart['und'] as $item) {
    $value = $item['value'];
    $fc_wrapper = entity_load('field_collection_item', array($value));
    $loaded = $fc_wrapper[$value];

    // only grab it if it's tableau
    if (!empty($loaded->field_tableau)) {
      // Interactive title
      $title = $loaded->field_interactive_title['und'][0]['safe_value'];
      // Unique identifier to create a placeholder div for Tableau
      $shorty = $loaded->field_interactive['und'][0]['safe_value'];
      // Boolean variable to determine whether this Tableau interactive should
      // have a dynamic title
      $dynamic = $loaded->field_dynamic_title['und'][0]['value'];
      $sheets = array();

      // individual Tableau sheets are stored as a field collection within a
      // field collection.  Go through each sheet individually.
      foreach ($loaded->field_tableau_sheets['und'] as $sheet_reference) {
        $sheet_id = $sheet_reference['value'];
        $sheet = entity_load('field_collection_item',
          array($sheet_id));
        array_push($sheets, array(
          'name'   => $sheet[$sheet_id]->field_sheet_url['und'][0]['safe_value'],
          'phone_layout' => $sheet[$sheet_id]->field_phone_layout['und'][0]['value']
        ));
      }

      // We have a single Tableau viz url, with an array of individual sheets.
      // Add this to the array of Tableau data
      $tableau_viz = $loaded->field_tableau['und'][0]['safe_value'];

      array_push($tableau_data, array(
        'title'         => $title,
        'id'            => $shorty,
        'url'           => $tableau_viz,
        'dynamic_title' => $dynamic,
        'sheets'        => $sheets
      ));
    }
  }

  // Finally, push the tableau_data array to jQuery.extend(Drupal.settings)
  drupal_add_js(array('tableau_data' => $tableau_data), 'setting');
}