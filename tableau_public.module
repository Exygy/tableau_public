<?php
/**
 * @file
 * Loads visualizations from Tableau Public with a simple url
 */

/**
 * Implements hook_menu().
 */
function tableau_public_menu() {
  $items = array();

  $items['admin/structure/tableau_public'] = array(
    'title' => 'Tableau Public',
    'description' => 'Global configuration for the Tableau Public module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tableau_public_form'),
    'access arguments' => array('Tableau Public configuration'),
  );

  return $items;
}

/**
 * The form for editing header format settings.
 *
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 *
 * @ingroup forms
 */
function tableau_public_form($form, &$form_state) {
  $form = array();
  $explanation = "<p>If your Tableau viz contains multiple sheets or dashboards, this module can create buttons to switch between them.  Use this settings page to add classes which you can style using your own css.</p><p>These settings will apply to all the Tableau visualizations on your site.</p>";

  $form['global'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('Global Settings'),
    '#description'  => t($explanation),
  );
  $form['global']['button_group_classes'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Button Group Classes'),
    '#default_value' => variable_get('button_group_classes'),
    '#description'   => t('Add a class to the button group.'),
  );
  $form['global']['button_classes'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Button Classes'),
    '#default_value' => variable_get('button_classes'),
    '#description'   => t('Add a class to individual buttons.'),
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));

  return $form;
}

/**
 * Stores the settings for the form.
 *
 * @param array $form_state
 *   A keyed array containing the current state of the form.
 *
 * @ingroup forms
 */
function tableau_public_form_submit($form, &$form_state) {
  variable_set('button_group_classes', $form_state['values']['button_group_classes']);
  variable_set('button_classes', $form_state['values']['button_classes']);

  drupal_set_message(t('Your configuration has been saved.'));
}

/**
 * Implements hook_permission().
 */
function tableau_public_permission() {
  return array(
    'Tableau Public module configuration' => array(
      'title' => t('Tableau Public'),
      'description' => t('Permission to access the config page for the Tableau Public module'),
    ),
  );
}

/**
 * Implements hook_field_info().
 */
function tableau_public_field_info() {
  return array(
    'tableau_public_info' => array(
      'label' => t('Tableau Visualization'),
      'description' => t("Basic information about a Tableau viz"),
      'settings' => array('max_length' => 255),
      'default_widget' => 'tableau_public_info',
      'default_formatter' => 'tableau_public_info', // This doesn't *have* to be the same name as default_widget's value, this is only coincidence
    ),
    'tableau_public_sheets' => array(
      'label' => t('Tableau Sheets'),
      'description' => t("Create a list of individual sheets within a Tableau viz"),
      'default_widget' => 'tableau_public_sheets',
      'default_formatter' => 'tableau_public_sheets',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function tableau_public_field_widget_info() {
  return array(
    'tableau_public_sheets' => array(
      'label' => 'Tableau Sheets',
      'field types' => array('tableau_public_sheets'),
      'multiple values' => TRUE,
    ),
    'tableau_public_info' => array(
      'label' => 'Tableau Viz information',
      'field types' => array('tableau_public_info'),
      'multiple values' => FALSE,
    ),
  );
}

/**
 * Implements hook__form_field_ui_field_edit_form_alter().
 *
 * Sets the sheets field to default to unlimited
 */
function tableau_public_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['#field']['type'] == 'tableau_public_sheets') {
    // Hide the cardinality setting on the field settings for properties fields.
    $form['field']['cardinality']['#default_value'] = FIELD_CARDINALITY_UNLIMITED;
  }
}

/**
 * Implements HOOK_FIELD_WIDGET_FORM().
 */
function tableau_public_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'tableau_public_sheets':
      // Custom definition for sheet name text field
      $value = isset($items[$delta]['name']) ? $items[$delta]['name'] : '';
      $element['name'] = array(
        '#attributes'     => array(
          'class'         => array('edit-sheet'),
          'title'         => '',
          'rel'           => '',
        ),
        '#type'           => 'textfield',
        '#size'           => 60,
        '#maxlength'      => 255,
        '#title'          => 'Sheet name',
        '#default_value'  => $value,
        '#attached'       => array(),
        '#prefix'         => '<div>',
        '#suffix'         => '</div>'
      );

      // Custom definition for mobile layout boolean checkbox
      $value = isset($items[$delta]['mobile']) ? $items[$delta]['mobile'] : '';
      $element['mobile'] = array(
        '#type'             => 'checkbox',
        '#default_value'    => $value,
        '#on_value'         => 'yes',
        '#off_value'        => 'no',
        '#title'            => 'Mobile layout',
        '#value_key'        => 'mobile',
      );

      break;
    case 'tableau_public_info':
      // Custom definition for viz name text field
      $value = isset($items[$delta]['title']) ? $items[$delta]['title'] : '';
      $element['title'] = array(
        '#attributes'     => array(
          'class'         => array('edit-title'),
          'title'         => '',
          'rel'           => '',
        ),
        '#type'           => 'textfield',
        '#size'           => 60,
        '#maxlength'      => 255,
        '#title'          => 'Viz title',
        '#default_value'  => $value,
        '#attached'       => array(),
        '#prefix'         => '<div>',
        '#suffix'         => '</div>'
      );

      // Custom definition for dynamic title boolean checkbox
      $value = isset($items[$delta]['dynamic']) ? $items[$delta]['dynamic'] : '';
      $element['dynamic'] = array(
        '#type'             => 'checkbox',
        '#default_value'    => $value,
        '#on_value'         => 'yes',
        '#off_value'        => 'no',
        '#title'            => 'Dynamic title',
        '#value_key'        => 'dynamic',
      );

      // Custom definition for short code text field
      $value = isset($items[$delta]['short']) ? $items[$delta]['short'] : '';
      $element['short'] = array(
        '#attributes'     => array(
          'class'         => array('edit-short'),
          'title'         => '',
          'rel'           => '',
        ),
        '#type'           => 'textfield',
        '#size'           => 60,
        '#maxlength'      => 255,
        '#title'          => 'Short code',
        '#default_value'  => $value,
        '#attached'       => array(),
        '#prefix'         => '<div>',
        '#suffix'         => '</div>'
      );

      // Custom definition for viz url text field
      $value = isset($items[$delta]['viz']) ? $items[$delta]['viz'] : 'http://';
      $element['viz'] = array(
        '#attributes'     => array(
          'class'         => array('edit-viz'),
          'title'         => '',
          'rel'           => '',
        ),
        '#type'           => 'textfield',
        '#size'           => 60,
        '#maxlength'      => 255,
        '#title'          => 'Viz url',
        '#default_value'  => $value,
        '#attached'       => array(),
        '#prefix'         => '<div>',
        '#suffix'         => '</div>'
      );

      // Custom definition for viz wrapper classes text field
      $value = isset($items[$delta]['viz_wrapper_classes']) ? $items[$delta]['viz_wrapper_classes'] : '';
      $element['viz_wrapper_classes'] = array(
        '#attributes'     => array(
          'class'         => array('edit-viz-wrapper-classes'),
          'title'         => '',
          'rel'           => '',
        ),
        '#type'           => 'textfield',
        '#size'           => 60,
        '#maxlength'      => 255,
        '#title'          => 'Custom viz wrapper classes',
        '#default_value'  => $value,
        '#attached'       => array(),
        '#prefix'         => '<div>',
        '#suffix'         => '</div>'
      );

      break;
  }

  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function tableau_public_field_is_empty($item, $field) {
  $temp = array_keys($field['columns']);
  $key = array_shift($temp);
  return empty($item[$key]);
}

/**
 * Implements hook_field_formatter_info().
 */
function tableau_public_field_formatter_info() {
  return array(
    'tableau_public_info_default' => array(
      'label' => t('Default'),
      'field types' => array('tableau_public_info'),
    ),
    'tableau_public_sheets_default' => array(
      'label' => t('Default'),
      'field types' => array('tableau_public_sheets'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function tableau_public_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if (!empty($items)) {
    switch ($display['type']) {
      case 'tableau_public_info_default':
        $shorty = $items[0]['short'];
        $element[0]['#markup'] = "<div id='" . $shorty . "'></div>";
        return $element;
        break;
    }
  }

}

/**
 * Implements hook_preprocess_node().
 *
 * Triggers tableau_public_check()
 */
function tableau_public_preprocess_node(&$vars) {
  tableau_public_check($vars);
}

/**
 * Implements hook_preprocess_entity().
 *
 * Now, for non-node entities!
 * Triggers tableau_public_check()
 */
function tableau_public_preprocess_entity(&$vars) {
  tableau_public_check($vars);
}

/**
 * Figure out whether it's a node or other kind of entity, and then load it
 */
function tableau_public_load_thing($vars) {
  $entity_type = $vars['elements']['#entity_type'];
  if ($entity_type == 'node') {
    $nid = $vars['nid'];
    $vid = $vars['vid'];
    $entity = node_load($nid, $vid);
  } else {
    $entity = $vars['elements']['#entity'];
  }

  return $entity;
}

/**
 * Implements hook_preprocess_node().
 *
 * When you load an entity, check to see if there's any Tableau info on it.
 * If there is, then automatically load the javascripts and
 * populate jQuery.extend().
 *
 * @param array $vars
 *    Array of variables from hook_preprocess_node() or hook_preprocess_entity()
 */
function tableau_public_check($vars) {
  // set up useful variables for this function
  $entity_type = $vars['elements']['#entity_type'];
  $bundle = $vars['elements']['#bundle'];
  $fields = field_info_instances($entity_type, $bundle);

  // set up variables just in case we find something
  $viz = array();
  $sheets = array();

  // check all fields, look for Tableau
  foreach ($fields as $field) {
    switch ($field['widget']['type']) {
      case 'tableau_public_info':
        // yay it's the viz info!
        $field_name = $field['field_name'];
        $entity = tableau_public_load_thing($vars);
        $viz_all = field_get_items($entity_type, $entity, $field_name);
        $viz = $viz_all[0];
        break;
      case 'tableau_public_sheets':
        // give a sheet
        $field_name = $field['field_name'];
        $entity = tableau_public_load_thing($vars);
        $sheets = field_get_items($entity_type, $entity, $field_name);
        break;
    }
  }

  // only do this if Tableau fields were found
  if (!empty($viz)) {
    tableau_public_add_viz($viz, $sheets);
  }
}

/**
 * Grabs data from node fields; adds to Drupal.setting js object.
 *
 * @param array $viz
 *    Array that describes the Tableau visualization.  Includes:
 *    - title: the human readable title for this viz
 *    - short: the short code.  This tells the javascript where to insert the viz
 *    - dynamic: indicate whether the title should change based on the sheet
 *    - button_group_classes: custom button group classes
 *    - button_classes: custom button classes
 *    - viz_wrapper_classes: custom viz wrapper classes
 *    - viz: the url to Tableau Public
 * @param array $sheets
 *    Array that describes the individual sheets to display.  Each item includes:
 *    - name: the human readable title for the individual sheet
 *    - mobile: whether this sheet has a mobile layout
 */
function tableau_public_add_viz($viz, &$sheets) {
  // Load the necessary libraries
  $path = drupal_get_path('module', 'tableau_public');
  drupal_add_js('https://public.tableau.com/javascripts/api/tableau-2.min.js', array('type' => 'external', 'scope' => 'footer'));
  drupal_add_js($path . '/tableau-interactive.js', array('type' => 'file', 'scope' => 'footer'));
  drupal_add_js('/sites/all/libraries/enquire.min.js', array('type' => 'file', 'scope' => 'footer'));

  $tableau_data = array();

  // Interactive title
  $title = $viz['title'];
  // Unique identifier to create a placeholder div for Tableau
  $shorty = $viz['short'];
  // Boolean variable to determine whether this Tableau interactive should
  // have a dynamic title
  $dynamic = $viz['dynamic'];
  // Custom button classes
  $button_group_classes = variable_get('button_group_classes');
  $button_classes = variable_get('button_classes');
  // Custom classes to be added to the viz wrapper div
  $viz_wrapper_classes = $viz['viz_wrapper_classes'];
  // We have a single Tableau viz url, with an array of individual sheets.
  // Add this to the array of Tableau data
  $tableau_viz = $viz['viz'];

  array_push($tableau_data, array(
    'title'                => $title,
    'id'                   => $shorty,
    'url'                  => $tableau_viz,
    'button_group_classes' => $button_group_classes,
    'button_classes'       => $button_classes,
    'viz_wrapper_classes'  => $viz_wrapper_classes,
    'dynamic_title'        => $dynamic,
    'sheets'               => $sheets
  ));

  // Finally, push the tableau_data array to jQuery.extend(Drupal.settings)
  drupal_add_js(array('tableau_data' => $tableau_data), 'setting');
}
